// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateEstateResponse defines model for CreateEstateResponse.
type CreateEstateResponse struct {
	// Id The ID of the created estate
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// CreateTreeRequest defines model for CreateTreeRequest.
type CreateTreeRequest struct {
	Height int `json:"height"`
	X      int `json:"x"`
	Y      int `json:"y"`
}

// CreateTreeResponse defines model for CreateTreeResponse.
type CreateTreeResponse struct {
	// Id The ID of the newly planted tree
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// DronePlanResponse defines model for DronePlanResponse.
type DronePlanResponse struct {
	MaxDistance int       `json:"max_distance"`
	Rest        DroneRest `json:"rest"`
}

// DroneRest defines model for DroneRest.
type DroneRest struct {
	X *int `json:"x,omitempty"`
	Y *int `json:"y,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// Estate defines model for Estate.
type Estate struct {
	Length int32 `json:"length"`
	Width  int32 `json:"width"`
}

// EstateStatsResponse defines model for EstateStatsResponse.
type EstateStatsResponse = map[string]interface{}

// HelloResponse defines model for HelloResponse.
type HelloResponse struct {
	Message string `json:"message"`
}

// TotalDistanceResponse defines model for TotalDistanceResponse.
type TotalDistanceResponse struct {
	TotalDistance *int `json:"totalDistance,omitempty"`
}

// GetEstateIdDronePlanMaxParams defines parameters for GetEstateIdDronePlanMax.
type GetEstateIdDronePlanMaxParams struct {
	// MaxDistance Maximum travel distance for the drone
	MaxDistance int `form:"max-distance" json:"max-distance"`
}

// GetHelloParams defines parameters for GetHello.
type GetHelloParams struct {
	Id int `form:"id" json:"id"`
}

// PostEstateJSONRequestBody defines body for PostEstate for application/json ContentType.
type PostEstateJSONRequestBody = Estate

// PostEstateIdTreeJSONRequestBody defines body for PostEstateIdTree for application/json ContentType.
type PostEstateIdTreeJSONRequestBody = CreateTreeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new estate
	// (POST /estate)
	PostEstate(ctx echo.Context) error
	// total distance of the drone
	// (GET /estate/{id}/drone-plan)
	GetEstateIdDronePlan(ctx echo.Context, id openapi_types.UUID) error
	// Get drone flight plan for an estate
	// (GET /estate/{id}/drone-plan-max)
	GetEstateIdDronePlanMax(ctx echo.Context, id openapi_types.UUID, params GetEstateIdDronePlanMaxParams) error
	// Plant a new tree in an estate
	// (GET /estate/{id}/stats)
	GetEstateIdStats(ctx echo.Context, id openapi_types.UUID) error
	// Plant a new tree in an estate
	// (POST /estate/{id}/tree)
	PostEstateIdTree(ctx echo.Context, id openapi_types.UUID) error
	// This is just a test endpoint to get you started.
	// (GET /hello)
	GetHello(ctx echo.Context, params GetHelloParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEstate converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstate(ctx)
	return err
}

// GetEstateIdDronePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdDronePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdDronePlan(ctx, id)
	return err
}

// GetEstateIdDronePlanMax converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdDronePlanMax(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEstateIdDronePlanMaxParams
	// ------------- Required query parameter "max-distance" -------------

	err = runtime.BindQueryParameter("form", true, true, "max-distance", ctx.QueryParams(), &params.MaxDistance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-distance: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdDronePlanMax(ctx, id, params)
	return err
}

// GetEstateIdStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdStats(ctx, id)
	return err
}

// PostEstateIdTree converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstateIdTree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstateIdTree(ctx, id)
	return err
}

// GetHello converts echo context to params.
func (w *ServerInterfaceWrapper) GetHello(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHelloParams
	// ------------- Required query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, true, "id", ctx.QueryParams(), &params.Id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHello(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/estate", wrapper.PostEstate)
	router.GET(baseURL+"/estate/:id/drone-plan", wrapper.GetEstateIdDronePlan)
	router.GET(baseURL+"/estate/:id/drone-plan-max", wrapper.GetEstateIdDronePlanMax)
	router.GET(baseURL+"/estate/:id/stats", wrapper.GetEstateIdStats)
	router.POST(baseURL+"/estate/:id/tree", wrapper.PostEstateIdTree)
	router.GET(baseURL+"/hello", wrapper.GetHello)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYQU8rNxD+K67b40ICvF722IJoDlRPENTDE6rc9SRr5LUXe5yXCOW/V7Y3IZt12ECB",
	"whMXFJnZ8TfzfTNj+54Wuqq1AoWW5vfUFiVULPz83QBDOLPIEC7B1lpZ8Ou10TUYFBCsBPd/OdjCiBqF",
	"VjSn4xLI6JToCcESSBH8cALBE83oRJuKIc2pc4LTjOKiBppTi0aoKV0u1yv6n1sokC6zBsvYAFzCnQOL",
	"XSAliGkZ1mHOqloCzX9dexIKYQrGu5q3TE5SJouWyXHXZJlRA3dOGOA0/0bn1H+TrSDc9ATw/FQq+C4X",
	"pJZM+YSigWem89RoBV8lU7vBVGz+NxcWmSqglY6j4TCVM9OQ8ouBCc3pz4MHXQ0aUQ3CtpfecDuDrd0a",
	"Zze7gF8m+W/zevRcXjtbnhmjzSN5AmvZNPyjm/hWiI1hKqxYZF3nEtQUS/9rTbJQeHJMU9F9F3xP2y1k",
	"8cNstdtugFfI0G6mIhLbxV1o5xRuySaFuWLz/oqtgAum+su2EqpPAymCOwt/gJR6L8bXW8VvMvKXNpL/",
	"lCzCfbUw1sjkaVMLu1Hgpll/gXbj9EtCTXTQmSig2UWxyltdjMYhNwJDeNcWDLkCMxOhPmdgbOxPR4fD",
	"w6G31DUoVgua05OwlNGaYRmgDuBB3jqWro+E+RY34jSnX7XFs9V0MLHB/6b5IkpJIUQtsbqWogifDW6t",
	"Vm0FPtZ4GufLNg9oHMTOFXIcsB4Phy+2a3KABgztHh8t1nPSuqIAaydOyoXP7JcXhNRuZgksIzVjUnAi",
	"VO1im7auqphZ0LyZYYT5MbSa5t6i4XdwL/hywH2HPvAjymM5PxsH2plhFSAYS/Nvj4+46ItkJDgKs456",
	"odI8CIpmK4WGWdcmM9vIQt9UvHlF4tMlnMh2KGKyGnyrFITII/Nf3o75RoVKI5lop/gW+T1Qp5Co63No",
	"ynrE1yeO0Bg+1fAjq2F3Szho5v0+beH6elsGr8J8tr3vBZuLylUEDZvBRowTbTaCbKDcOTCLBywVmx+0",
	"jrG7UHXG82sKsHvaTxB+tZ46Ta1NpL/MxJJrk38O2LUJ+WFqPRee0BIu2LyvK3yK4UOLYbsj+J/2v5wP",
	"PtwQSF2gEon3VsKiKLbCfWft3+sHm4MgGgAi1NNqPyTiOUeBT+LfM/HbdR5eqPa49o34OL5lPf1oiDq+",
	"h4W1BtLrieTlr6bdl83/5ZbaeplM6ML/f/3w+J5uqB+uPkqQMjy67OqR4SmpWwupI0aPpN/0YNF+NUtJ",
	"CCwSA+iMenPa/tzB17gUlghLbp31tKGHCIrXWviOoskUkCy0IxaZQeCH0bcFM1vR4oykOS0R63wwkLpg",
	"svTNbnmz/DcAAP//glY551sZAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
