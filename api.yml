# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /hello:
    get:
      summary: This is just a test endpoint to get you started.
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Test return
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/HelloResponse"
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate:
    post:
      summary: Create a new estate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Estate"
      responses:
        '200':
          description: Estate created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEstateResponse"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/tree:
    post:
      summary: Plant a new tree in an estate
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the estate to plant the tree in
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTreeRequest"
      responses:
        '200':
          description: Tree planted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTreeResponse"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Estate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/stats:
    GET:
      summary: Plant a new tree in an estate
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the estate
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: statistic of the estate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstateStatsResponse"
        '404':
          description: Estate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/drone-plan:
    GET:
      summary: total distance of the drone
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the estate , drone plan
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: total distance of the drone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TotalDistanceResponse"
        '404':
          description: Estate not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/drone-plan-max:
    GET:
      summary: Get drone flight plan for an estate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the estate

        - name: max-distance
          in: query
          required: true
          schema:
            type: integer
          description: Maximum travel distance for the drone
      responses:
        '200':
          description: Successful drone flight plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DronePlanResponse"
        '404':
          description: city not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /voteCount:
    GET:
      summary: Get drone flight plan for an estate
      parameters:
        - name: estimated-cost
          in: query
          required: true
          schema:
            type: integer
          description: estimated cost for the city
        - name: city-name
          in: query
          required: true
          schema:
            type: string
          description: Name of the city
      responses:
        '200':
          description: Successful drone flight plan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityVoteResponse"
components:
  schemas:
    CityVoteResponse:
      type: object
      required:
        - city
        - voteCount
      properties:
        city:
          type: string
          example: "New York"
        voteCount:
          type: integer
          example: 1000
    DronePlanResponse:
      type: object
      required:
        - max_distance
        - rest
      properties:
        max_distance:
          type: integer
          example: 100
        rest:
          $ref: "#/components/schemas/DroneRest"
    DroneRest:
      type: object
      properties:
        x:
          type: integer
          example: 1
        y:
          type: integer
          example: 2
    EstateStatsResponse:
      type: object
      properties:
      schema:
        type: object
        properties:
          couunt:
            type: integer
            example: 10
          max:
            type: integer
            example: 5
          min:
            type: integer
            example: 1
          median:
            type: integer
            example: 3
    HelloResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Hello, World!
    TotalDistanceResponse:
      type: object
      properties:
        totalDistance:
          type: integer
          example: 100
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    Estate:
      type: object
      required:
        - width
        - length
      properties:
        width:
          type: integer
          format: int32
        length:
          type: integer
          format: int32
    CreateEstateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the created estate
    CreateTreeRequest:
      type: object
      required:
        - x
        - y
        - height
      properties:
        x:
          type: integer
          example: 3
        y:
          type: integer
          example: 2
        height:
          type: integer
          example: 5
    CreateTreeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the newly planted tree